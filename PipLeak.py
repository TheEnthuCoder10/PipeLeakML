from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D
from keras.layers import Activation, Dropout, Flatten, Dense
from keras import backend as K
import numpy as np
from keras preprocessing import image

#Dimensions of images
img_width, img_height = 150 , 150

#Directory of images
train_data_dir = 'data/train'
validation_data_dir = 'data/validate'

#How many pictures to distribute to train and validate
nb_train_samples = 100
nb_validation_samples = 70

# 10 images run through the CNN 10 times
epochs = 7
batch_size = 10

if K.image_data_format() == 'channels_first':
    input_shape = (3,img_width,img_height)
else:
    input_shape = (img_width,img_height,3)

#Out of the 100 images sent for training, 400 images can be generated by conducting these analysis methods
train_datagen = ImageDataGenerator(
    rescale = 1. / 255,
    shear_range = 0.2,
    zoom_range = 0.2,
    horizontal_flip = True
)

#Not compulsory but still can be included as testing data should be more natural
test_datagen = ImageDataGenerator(
    rescale = 1. / 255
)

#Generate dataset to be given to CNN
train_generator = train_datagen.flow_from_directory(
    train_data_dir,
    target_size = (img_width,img_height),
    batch_size = batch_size,
    class_mode = 'binary'
)

validation_generator = test_datagen.flow_from_directory(
    validation_data_dir,
    target_size = (img_width,img_height),
    batch_size = batch_size,
    class_mode = 'binary'
)


model = Sequential()
model.add(Conv2D(32,(3,3), input_shape=input_shape))
model.add(Activation('relu'))

