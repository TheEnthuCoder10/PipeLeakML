from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D
from keras.layers import Activation, Dropout, Flatten, Dense
from keras import backend as K

# Dimensions of images
img_width, img_height = 150, 150

# Directory of images
train_data_dir = 'data/train'
validation_data_dir = 'data/validate'

# How many pictures to distribute to train and validate
nb_train_samples = 100
nb_validation_samples = 70

# 10 images run through the CNN 10 times
epochs = 7
batch_size = 10

if K.image_data_format() == 'channels_first':
    input_shape = (3, img_width, img_height)
else:
    input_shape = (img_width, img_height, 3)

# build CNN model
model = Sequential()
model.add(Conv2D(32, (3, 3), input_shape=input_shape))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(32, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(64, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Flatten())
model.add(Dense(64))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(1))
model.add(Activation('sigmoid'))

model.compile(loss='binary_crossentropy',
              optimizer='rmsprop',
              metrics=['accuracy'])

# Out of the 100 images sent for training, 400 images can be generated by conducting these analysis methods
train_datagen = ImageDataGenerator(
    rescale=1. / 255,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True)

# Not compulsory but still can be included as testing data should be more natural
test_datagen = ImageDataGenerator(
    rescale=1. / 255
)

# Generate dataset to be given to CNN
train_generator = train_datagen.flow_from_directory(
    train_data_dir,
    target_size=(img_width, img_height),
    batch_size=batch_size,
    class_mode='binary'
)

validation_generator = test_datagen.flow_from_directory(
    validation_data_dir,
    target_size=(img_width, img_height),
    batch_size=batch_size,
    class_mode='binary'

)

# command that learns data
model.fit_generator = (
    train_generator,
    steps_per_epoch = nb_train_samples // batch_size,
epochs=epochs,
validation_data = validation_generator,
validation_steps = nb_validation_samples // batch_size)

# saves algjorithm so that we can use it next time
model.save_weights('learnt_PipeLeak_alghorithm.h5')

# Applies alghorithm on given image
img_pred = image.load.img('data/validation/PipLeaks/<insert an image name>.jpg', target_size=(150, 150))
img_pred = image.img_to_array(img_pred)
img_pred = np.expand_dims(img_pred, axis=0)

# Displays analysis
result = model.predict(img_pred)
print(result)

if result[0][0] == 1:
    prediction = 'Pipleak'
    print(prediction)
else:
    prediction = 'NoLeaks'
    print(prediction)


